<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:odt="http://schemas.orm.net/ORMDataTypes" xmlns:oil="http://schemas.orm.net/OIAL" xmlns:plx="http://schemas.neumont.edu/CodeGeneration/PLiX" xmlns:prop="urn:schemas-orm-net:PLiX:CLI:Properties" targetNamespace="urn:schemas-orm-net:PLiX:CLI:Properties" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0">
	<xs:annotation>
		<xs:appinfo source="zlib/libpng License Copyright Notice">
			Copyright Â© Neumont University. All rights reserved.

			This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
			Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
			1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
			2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
			3. This notice may not be removed or altered from any source distribution.
		</xs:appinfo>
		<xs:appinfo source="Contributors">Kevin M. Owen, Jaron Briggs, Benjamin Kiefer, Roland Sanidad</xs:appinfo>
	</xs:annotation>
	<xs:import namespace="http://schemas.orm.net/OIAL"/>
	<xs:import namespace="http://schemas.neumont.edu/CodeGeneration/PLiX"/>

	<xs:element name="AllProperties">
		<xs:annotation>
			<xs:documentation>A collection of Property elements for an oil:model</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="prop:Properties" maxOccurs="unbounded" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Properties">
		<xs:annotation>
			<xs:documentation>A collection of Property elements for an oil:conceptType.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="prop:IdentityField"/>
				<xs:element ref="prop:Property"/>
			</xs:choice>
			<xs:attribute name="conceptTypeName" use="required" type="xs:string">
				<xs:annotation>
					<xs:documentation>The name of the oil:conceptType that this Properties element is for.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
		<xs:key name="PropertiesKey">
			<xs:selector xpath="."/>
			<xs:field xpath="@conceptTypeName"/>
		</xs:key>
		<xs:key name="PropertyKey">
			<xs:selector xpath="prop:Property|prop:IdentityField"/>
			<xs:field xpath="@name"/>
		</xs:key>
	</xs:element>
	<xs:element name="IdentityField">
		<xs:annotation>
			<xs:documentation>Represents a CLI field for an identity property.</xs:documentation>
			<xs:documentation>This is used for data access layer implementations, and never effects the abstract classes and/or interfaces.</xs:documentation>
			<xs:documentation>It can be ignored for other implementations where it is not relevant (e.g. in-memory).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="name" use="required" type="xs:token">
				<xs:annotation>
					<xs:documentation>The name of this IdentityField.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="Property">
		<xs:annotation>
			<xs:documentation>Represents a CLI property.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="prop:DataType"/>
			</xs:sequence>
			<xs:attribute name="name" use="required" type="xs:token">
				<xs:annotation>
					<xs:documentation>The name of this Property.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="mandatory" use="required" type="oil:mandatory">
				<xs:annotation>
					<xs:documentation>Whether this Property is alethicly mandatory, deonticly mandatory, or not mandatory.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="isUnique" use="required" type="oil:canonicalBoolean">
				<xs:annotation>
					<xs:documentation>Whether this Property (on its own) uniquely identifies its parent.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="isCollection" use="required" type="oil:canonicalBoolean">
				<xs:annotation>
					<xs:documentation>Whether this Property is a collection.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="isCustomType" use="required" type="oil:canonicalBoolean">
				<xs:annotation>
					<xs:documentation>If true, the data type of this Property is a custom-generated type which should be notified when this property changes.</xs:documentation>
					<xs:documentation>Note that a Property can have both @isCollection and @isCutomType be true, meaning that it is a collection of custom types.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="canBeNull" use="required" type="oil:canonicalBoolean">
				<xs:annotation>
					<xs:documentation>Can the prop:DataType contained within this prop:Property be null?</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="oppositeName" use="optional" type="xs:token">
				<xs:annotation>
					<xs:documentation>The name of the Property that represents the other end of this relationship.</xs:documentation>
					<xs:documentation>Note that if @isCustomType is true, this attribute must be present. If @isCustomType is false, this attribute must not be present.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="DataType">
		<xs:annotation>
			<xs:documentation>The data type of this Property.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="plx:typeRefType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="FormatMapping">
		<xs:annotation>
			<xs:documentation>A mapping from an oil:informationTypeFormat to a prop:DataType (i.e. a PLiX data type).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence minOccurs="0">
				<xs:element ref="prop:DataType"/>
				<xs:any minOccurs="0" processContents="strict" namespace="http://schemas.neumont.edu/CodeGeneration/PLiX">
					<xs:annotation>
						<xs:documentation>Constraint enforcement code, if any, for this data type. Should return plx:trueKeyword if the value is valid.</xs:documentation>
						<xs:documentation>Use plx:valueKeyword for references to the variable being validated.</xs:documentation>
					</xs:annotation>
				</xs:any>
			</xs:sequence>
			<xs:attribute name="name" use="required" type="xs:token">
				<xs:annotation>
					<xs:documentation>The name of the oil:informationTypeFormat that this prop:FormatMapping is for.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="canBeNull" use="required" type="oil:canonicalBoolean">
				<xs:annotation>
					<xs:documentation>Can the prop:DataType contained within this prop:FormatMapping be null?</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="isIdentity" use="optional" default="false" type="oil:canonicalBoolean">
				<xs:annotation>
					<xs:documentation>Is this prop:FormatMapping for an odt:identity?</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
</xs:schema>