<?xml version="1.0" encoding="utf-8"?>
<xs:schema
	targetNamespace="http://schemas.orm.net/OIAL"
	xmlns:oil="http://schemas.orm.net/OIAL"
	xmlns:odt="http://schemas.orm.net/ORMDataTypes"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified"
	version="1.0">
	<xs:annotation>
		<xs:appinfo source="zlib/libpng License Copyright Notice">
			Copyright © Neumont University. All rights reserved.

			This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
			Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
			1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
			2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
			3. This notice may not be removed or altered from any source distribution.
		</xs:appinfo>
		<xs:appinfo source="Contributors">Kevin M. Owen, Corey Kaylor, Korvyn Dornseif</xs:appinfo>
	</xs:annotation>

	<xs:import namespace="http://schemas.orm.net/ORMDataTypes"/>

	<xs:simpleType name="sourceRef">
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="modality">
		<xs:restriction base="xs:string">
			<xs:enumeration value="alethic"/>
			<xs:enumeration value="deontic"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="mandatory">
		<xs:union memberTypes="oil:modality">
			<xs:simpleType>
				<xs:restriction base="oil:canonicalBoolean">
					<xs:pattern value="false"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	<xs:simpleType name="canonicalBoolean">
		<xs:annotation>
			<xs:documentation>An xs:boolean limited to the canonical representation defined in XML Schema Part 2: Datatypes Second Edition.</xs:documentation>
			<xs:documentation>That is, an oil:canonicalBoolean can only contain the set of literals {true, false}, and cannot contain the set of literals {1, 0}.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:boolean">
			<xs:pattern value="false|true"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="model">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="informationTypeFormats">
					<xs:annotation>
						<xs:documentation>informationTypeFormat is essentially analagous to the terms 'data type' (as used in XML and OOP) and 'DOMAIN' (as used in SQL).</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="odt:dataType" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element name="conceptType" type="oil:conceptType">
						<xs:annotation>
							<xs:documentation>A conceptType represents an abstract or physical concept (e.g. a person, a name, an idea).</xs:documentation>
						</xs:annotation>
						<xs:key name="conceptTypeChildKey">
							<xs:selector xpath="oil:conceptType|oil:conceptTypeRef|oil:informationType"/>
							<xs:field xpath="@name"/>
						</xs:key>
					</xs:element>
					<xs:group ref="oil:roleSequenceConstraint"/>
				</xs:choice>
			</xs:sequence>
			<xs:attribute name="name" use="required" type="xs:token"/>
			<xs:attribute name="sourceRef" use="required" type="oil:sourceRef"/>
		</xs:complexType>
		<xs:key name="conceptTypeKey">
			<xs:selector xpath=".//oil:conceptType"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="informationTypeFormatKey">
			<xs:selector xpath="oil:informationTypeFormats/child::*"/>
			<xs:field xpath="@name"/>
		</xs:key>
	</xs:element>


	<xs:complexType name="conceptType">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="conceptType" type="oil:absorbedConceptType">
				<xs:key name="absorbedConceptTypeChildKey">
					<xs:selector xpath="oil:conceptType|oil:conceptTypeRef|oil:informationType"/>
					<xs:field xpath="@name"/>
				</xs:key>
			</xs:element>
			<xs:element name="informationType" type="oil:informationType">
				<xs:keyref name="informationTypeFormatRef" refer="oil:informationTypeFormatKey">
					<xs:selector xpath="."/>
					<xs:field xpath="@target"/>
				</xs:keyref>
			</xs:element>
			<xs:element name="conceptTypeRef">
				<xs:complexType>
					<xs:group ref="oil:singleRoleConstraintIncludingUniqueness" minOccurs="0" maxOccurs="2"/>
					<xs:attribute name="name" use="required" type="xs:token"/>
					<xs:attribute name="mandatory" use="required" type="oil:mandatory"/>
					<xs:attribute name="sourceRoleRef" use="required" type="oil:sourceRef"/>
					<xs:attribute name="target" use="required" type="xs:token"/>
					<xs:attribute name="oppositeName" use="required" type="xs:token"/>
				</xs:complexType>
				<xs:keyref name="conceptTypeRef" refer="oil:conceptTypeKey">
					<xs:selector xpath="."/>
					<xs:field xpath="@target"/>
				</xs:keyref>
			</xs:element>
			<xs:group ref="oil:roleSequenceConstraint"/>
		</xs:choice>
		<xs:attribute name="name" use="required" type="xs:token"/>
		<xs:attribute name="sourceRef" use="required" type="oil:sourceRef"/>
	</xs:complexType>

	<xs:complexType name="absorbedConceptType">
		<xs:complexContent>
			<xs:extension base="oil:conceptType">
				<xs:group ref="oil:singleRoleConstraint" minOccurs="0"/>
				<xs:attribute name="mandatory" use="required" type="oil:mandatory"/>
				<xs:attribute name="sourceRoleRef" use="required" type="oil:sourceRef"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="informationType">
		<xs:group ref="oil:singleRoleConstraintIncludingUniqueness" minOccurs="0" maxOccurs="2"/>
		<xs:attribute name="name" use="required" type="xs:token"/>
		<xs:attribute name="sourceRef" use="required" type="oil:sourceRef"/>
		<xs:attribute name="mandatory" use="required" type="oil:mandatory"/>
		<xs:attribute name="formatRef" use="required" type="xs:token"/>
		<xs:attribute name="sourceRoleRef" use="optional" type="oil:sourceRef">
			<xs:annotation>
				<xs:documentation>@sourceRoleRef is the @id of the role that led to the creation of this oil:informationType.</xs:documentation>
				<xs:documentation>It will always be present, except for a single oil:informationType inside each conceptType created for an orm:ValueType.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:group name="typeRef">
		<xs:annotation>
			<xs:documentation>Note: typeRef is in a group to prevent it from being picked up as a possible root element.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="typeRef">
				<xs:complexType>
					<xs:attribute name="targetConceptType" use="required" type="xs:token">
						<xs:annotation>
							<xs:documentation>The oil:conceptType being referenced, or the oil:conceptType containing the oil:conceptTypeRef or oil:informationType being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="targetChild" use="optional" type="xs:token">
						<xs:annotation>
							<xs:documentation>The oil:conceptTypeRef or oil:informationType being referenced. If an oil:conceptType is being referenced, this attribute must not be present.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
				<xs:keyref name="typeRefConceptTypeTarget" refer="oil:conceptTypeKey">
					<xs:selector xpath="."/>
					<xs:field xpath="@targetConceptType"/>
				</xs:keyref>
			</xs:element>
		</xs:choice>
	</xs:group>

	<xs:complexType name="roleSequence">
		<xs:group ref="oil:typeRef" maxOccurs="unbounded"/>
	</xs:complexType>

	<xs:complexType name="frequencyBound">
		<xs:complexContent>
			<xs:restriction base="odt:bound">
				<xs:attribute name="value" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:positiveInteger">
							<xs:minInclusive value="2"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="clusivity" use="required" type="odt:clusivity" fixed="inclusive"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="constraint" abstract="true">
		<xs:attribute name="name" use="required" type="xs:ID"/>
		<xs:attribute name="modality" use="required" type="oil:modality"/>
		<xs:attribute name="sourceRef" use="optional" type="oil:sourceRef"/>
	</xs:complexType>

	<xs:group name="singleRoleConstraintIncludingUniqueness">
		<xs:choice>
			<xs:element name="singleRoleUniquenessConstraint">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="oil:singleRoleConstraint">
							<xs:attribute name="isPreferred" use="required" type="oil:canonicalBoolean"/>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:group ref="oil:singleRoleConstraint"/>
		</xs:choice>
	</xs:group>
	<xs:group name="singleRoleConstraint">
		<xs:annotation>
			<xs:documentation>Constraints that can apply only to a single role (e.g. value, internal uniqueness on a single role, frequency on a single role)</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="valueConstraint">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="oil:singleRoleConstraint">
							<xs:choice maxOccurs="unbounded">
								<xs:element name="range">
									<xs:complexType>
										<xs:sequence>
											<xs:element name="lowerBound" minOccurs="0" type="odt:bound"/>
											<xs:element name="upperBound" minOccurs="0" type="odt:bound"/>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
								<xs:element name="enumeration" type="odt:enumeration"/>
							</xs:choice>
							<xs:attribute name="appliesTo" use="required">
								<xs:simpleType>
									<xs:restriction base="xs:string">
										<xs:enumeration value="parent"/>
										<xs:enumeration value="self"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="singleRoleFrequencyConstraint">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="oil:singleRoleConstraint">
							<xs:sequence>
								<xs:element name="lowerBound" minOccurs="0" type="oil:frequencyBound"/>
								<xs:element name="upperBound" minOccurs="0" type="oil:frequencyBound"/>
							</xs:sequence>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:complexType name="singleRoleConstraint">
		<xs:annotation>
			<xs:documentation>Constraints that can apply only to a single role (e.g. value, internal uniqueness on a single role, frequency on a single role)</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="oil:constraint"/>
		</xs:complexContent>
	</xs:complexType>


	<xs:group name="roleSequenceConstraint">
		<xs:choice>
			<xs:group ref="oil:singleRoleSequenceConstraint"/>
			<xs:group ref="oil:multiRoleSequenceConstraint"/>
		</xs:choice>
	</xs:group>

	<xs:group name="singleRoleSequenceConstraint">
		<xs:annotation>
			<xs:documentation>Constraints that can apply only to a single role sequence (e.g. frequency on multiple roles, ring, disjunctive mandatory, uniqueness on multiple roles)</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="roleSequenceFrequencyConstraint">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="oil:singleRoleSequenceConstraint">
							<xs:sequence>
								<xs:element name="lowerBound" minOccurs="0" type="oil:frequencyBound"/>
								<xs:element name="upperBound" minOccurs="0" type="oil:frequencyBound"/>
							</xs:sequence>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="ringConstraint">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="oil:singleRoleSequenceConstraint">
							<xs:attribute name="type" use="required">
								<xs:simpleType>
									<xs:restriction base="xs:string">
										<xs:enumeration value="irreflexive"/>
										<xs:enumeration value="acyclic"/>
										<xs:enumeration value="intransitive"/>
										<xs:enumeration value="acyclic intransitive"/>
										<xs:enumeration value="symmetric"/>
										<xs:enumeration value="asymmetric"/>
										<xs:enumeration value="anti-symmetric"/>
										<xs:enumeration value="pro-symmetric"/>
										<xs:enumeration value="conservative-symmetric"/>
										<xs:enumeration value="liberal-symmetric"/>
										<xs:enumeration value="red-symmetric"/>
										<xs:enumeration value="blue-symmetric"/>
										<xs:enumeration value="good-symmetric"/>
										<xs:enumeration value="bad-symmetric"/>
										<xs:enumeration value="right-symmetric"/>
										<xs:enumeration value="left-symmetric"/>
										<xs:enumeration value="apathetic-symmetric"/>
										<xs:enumeration value="negative-symmetric"/>
										<xs:enumeration value="positive-symmetric"/>
										<xs:enumeration value="symmetric irreflexive"/>
										<xs:enumeration value="symmetric intransitive"/>
										<xs:enumeration value="asymmetric intransitive"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="disjunctiveMandatoryConstraint" type="oil:singleRoleSequenceConstraint"/>
			<xs:element name="roleSequenceUniquenessConstraint">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="oil:singleRoleSequenceConstraint">
							<xs:attribute name="isPreferred" use="required" type="oil:canonicalBoolean"/>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:complexType name="singleRoleSequenceConstraint">
		<xs:annotation>
			<xs:documentation>Constraints that can apply only to a single role sequence (e.g. frequency on multiple roles, ring, disjunctive mandatory, uniqueness on multiple roles)</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="oil:constraint">
				<xs:sequence>
					<xs:element name="roleSequence">
						<xs:complexType>
							<xs:complexContent>
								<xs:restriction base="oil:roleSequence">
									<xs:group ref="oil:typeRef" minOccurs="2" maxOccurs="unbounded"/>
								</xs:restriction>
							</xs:complexContent>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:group name="multiRoleSequenceConstraint">
		<xs:annotation>
			<xs:documentation>Constraints that can apply only to multiple role sequences (e.g. subset, exclusion, equality)</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="subsetConstraint">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="oil:multiRoleSequenceConstraint">
							<xs:sequence>
								<xs:element name="referencingRoleSequence" type="oil:roleSequence"/>
								<xs:element name="referencedRoleSequence" type="oil:roleSequence"/>
							</xs:sequence>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="exclusionConstraint" type="oil:twoOrMoreRoleSequenceConstraint"/>
			<xs:element name="equalityConstraint" type="oil:twoOrMoreRoleSequenceConstraint"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="multiRoleSequenceConstraint" abstract="true">
		<xs:annotation>
			<xs:documentation>Constraints that can apply only to multiple role sequences (e.g. subset, exclusion, equality)</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="oil:constraint"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="twoOrMoreRoleSequenceConstraint">
		<xs:complexContent>
			<xs:extension base="oil:multiRoleSequenceConstraint">
				<xs:sequence>
					<xs:element name="roleSequence" type="oil:roleSequence" minOccurs="2" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

</xs:schema>
